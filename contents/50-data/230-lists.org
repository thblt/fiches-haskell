























Cette fiche résume quelques unes des fonctions essentielles applicables
à des listes.

* Fonctions du premier ordre
  :PROPERTIES:
  :CUSTOM_ID: fonctions-du-premier-ordre
  :END:

** ~(++) :: [a] -> [a] -> [a]~
   :PROPERTIES:
   :CUSTOM_ID: section
   :END:

est l'opérateur de concaténation: ~"Hask" ++ "ell" == "Haskell"~.

** ~take :: Int -> [a] -> [a]~
   :PROPERTIES:
   :CUSTOM_ID: section-1
   :END:

renvoie les $n$ premiers éléments de la liste, ou la liste si sa taille
est inférieure à $n$: ~take 3 [1..10] == [1,2,3]~ ;
~take 100 [1,2] == [1,2]~

** ~drop :: Int -> [a] -> [a]~
   :PROPERTIES:
   :CUSTOM_ID: section-2
   :END:

renvoie la liste moins les $n$ premiers éléments, ou la liste vide si sa
taille est inférieure à $n$: ~drop 3 [1..6] == [4,5,6]~ ;
~drop 100 [1,2] == []~

* Fonctions d'ordre supérieur
  :PROPERTIES:
  :CUSTOM_ID: fonctions-dordre-supérieur
  :END:

** ~takeWhile :: (a -> Bool) -> [a] -> [a]~
   :PROPERTIES:
   :CUSTOM_ID: section-3
   :END:

est similaire à ~take~, mais renvoie la tête de la liste jusqu'à la
dernière valeur pour laquelle la condition est vraie:
~takeWhile (<5) [1..8] == [1,2,3,4]~

** ~dropWhile :: (a -> Bool) -> [a] -> [a]~
   :PROPERTIES:
   :CUSTOM_ID: section-4
   :END:

est similaire à ~take~, mais renvoie la queue de la liste à partir
de la première valeur pour laquelle la condition est fausse:
~dropWhile (<5) [1..8] == [5,6,7,8]~

** ~map :: (a -> b) -> [a] -> [b]~
   :PROPERTIES:
   :CUSTOM_ID: section-5
   :END:

applique une fonction à chaque élément d'une liste:
~map (*2) [1,2,3] == [2,4,6]~.

#begin_warn ~map~ existe pour des raisons historiques. Préférez-lui
[[#fn:fmap][~fmap~]], qui s'applique à n'importe quel
[[#Functor][foncteur]] et pas uniquement aux listes. #end_

** ~head :: [a] -> a~
   :PROPERTIES:
   :CUSTOM_ID: section-6
   :END:

renvoie le premier élément de la liste, ou génère une exception si la
liste est vide.

** ~last :: [a] -> a~
   :PROPERTIES:
   :CUSTOM_ID: section-7
   :END:

renvoie le dernier élément de la liste, ou génère une exception si la
liste est vide.

** ~tail :: [a] -> [a]~
   :PROPERTIES:
   :CUSTOM_ID: section-8
   :END:

Lorem ipsum

** ~zip :: [a] -> [b] -> [(a, b)]~
   :PROPERTIES:
   :CUSTOM_ID: section-9
   :END:

Lorem ipsum

** ~zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]~
   :PROPERTIES:
   :CUSTOM_ID: section-10
   :END:

Lorem ipsum

** ~zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]~
   :PROPERTIES:
   :CUSTOM_ID: section-11
   :END:

Lorem ipsum

** ~zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]~
   :PROPERTIES:
   :CUSTOM_ID: section-12
   :END:

Lorem ipsum
